// --- bootloader.js ---
// This script runs first to securely load the main Aura Wallet application.

(async () => {
    // In a production environment, these paths would point to your actual server assets.
    // The `.js` file would be the obfuscated output of your build process.
    const APP_BUNDLE_URL = './aura-wallet.js';
    const SIGNATURE_URL = './aura-wallet.sig'; // The signature generated by your server
    const PUBLIC_KEY_URL = './master_public_key.json'; // The server's public Falcon key

    const bootStatusEl = document.getElementById('boot-status');
    const bootMessageEl = document.getElementById('boot-message');

    /**
     * Fetches a resource from the server.
     * @param {string} url - The URL to fetch.
     * @param {string} type - The expected response type ('arrayBuffer' or 'json').
     * @returns {Promise<ArrayBuffer|object>}
     */
    const fetchAsset = async (url, type = 'arrayBuffer') => {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to download application component: ${response.statusText}`);
        }
        return response[type]();
    };

    /**
     * Decodes a Base64 string into a Uint8Array.
     * @param {string} str - The Base64 encoded string.
     * @returns {Uint8Array}
     */
    const base64ToUint8Array = (str) => {
        try {
            const binaryString = atob(str);
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes;
        } catch (e) {
            throw new Error("Failed to decode Base64 asset. The file may be corrupt.");
        }
    };

    /**
     * The main function to perform the secure boot process.
     */
    const secureBoot = async () => {
        try {
            bootMessageEl.textContent = 'Loading cryptographic libraries...';
            // 1. Dynamically import the required post-quantum crypto libraries.
            // These must be lightweight and trusted.
            const { default: jsSha3 } = await import('https://esm.sh/js-sha3@0.9.3');
            const { default: pqcSignFalcon1024 } = await import('https://esm.sh/@dashlane/pqc-sign-falcon-1024-node@1.0.0');

            bootMessageEl.textContent = 'Downloading application components...';
            // 2. Fetch all security assets from the server in parallel for speed.
            const [appCodeBuffer, signatureData, publicKeyData] = await Promise.all([
                fetchAsset(APP_BUNDLE_URL),
                fetchAsset(SIGNATURE_URL, 'json'),
                fetchAsset(PUBLIC_KEY_URL, 'json')
            ]);

            const appCode = new Uint8Array(appCodeBuffer);
            const signature = base64ToUint8Array(signatureData.signature);
            const masterPublicKey = base64ToUint8Array(publicKeyData.public_key);

            bootMessageEl.textContent = 'Verifying application integrity...';
            // 3. Perform the client-side cryptographic verification.

            // Layer 2: Re-calculate the SHAKE256 hash of the downloaded code.
            const hashOfCode = new Uint8Array(jsSha3.shake256.create(1536).update(appCode).digest());

            // Layer 3: Verify the Falcon-1024 signature against the re-calculated hash.
            const falconApi = await pqcSignFalcon1024();
            const isSignatureValid = await falconApi.verify(signature, hashOfCode, masterPublicKey);

            // 4. Make the final security decision: execute or abort.
            if (isSignatureValid) {
                bootMessageEl.textContent = 'Verification successful. Starting wallet...';
                // Success: The code is authentic and untampered.
                const appScript = new TextDecoder().decode(appCode);
                const scriptElement = document.createElement('script');
                scriptElement.type = 'module';
                scriptElement.textContent = appScript;
                document.body.appendChild(scriptElement);
                // Hide the boot status view once the main app takes over
                bootStatusEl.style.display = 'none';
            } else {
                // Critical failure: The code has been tampered with or is from an impostor server.
                throw new Error("Application signature is invalid. Execution has been blocked to protect your security.");
            }

        } catch (error) {
            // Display a user-facing error and halt execution completely.
            bootStatusEl.innerHTML = `
                <div class="card">
                    <h1 style="color: var(--danger-color);">Security Alert</h1>
                    <p style="margin-bottom: 20px;">${error.message}</p>
                    <p>The application cannot be loaded. This may be due to a network error or a potential security threat. Please ensure you are on a trusted network and refresh the page.</p>
                </div>
            `;
        }
    };

    // Start the secure boot process as soon as the DOM is ready.
    document.addEventListener('DOMContentLoaded', secureBoot);
})();
